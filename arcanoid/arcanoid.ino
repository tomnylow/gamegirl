#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>


int speakerPin = 9; 

// Размеры экрана
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// Инициализация дисплея
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Игровые переменные
int ballX = SCREEN_WIDTH / 2;
int ballY = SCREEN_HEIGHT - 10;
int ballRadius = 5;

int paddleWidth = 40;
int paddleHeight = 5;
int paddleX = SCREEN_WIDTH / 2 - 20;
int paddleY = SCREEN_HEIGHT - paddleHeight;

int brickWidth = 20;
int brickHeight = 10;
const int brickRows = 2;
const int brickCols = 6;
bool bricks[brickRows][brickCols] = {false};
int ballSpeedX = 2;
int ballSpeedY = 2;
const int buttonLeftPin = 7;
const int buttonRightPin = 10;
bool gameWon = false;

static const uint8_t  PROGMEM arc_img[1024] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xe1, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xc1, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x81, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc3, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 
    0xdf, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xfd, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xe7, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xe6, 0x1d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf2, 0x1d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0d, 0xff, 0xdf, 0xff, 0xff, 0xff, 0x9f, 0xff, 
    0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0d, 0xff, 0x9f, 0xff, 0xff, 0xff, 0x4f, 0xff, 
    0xf3, 0xff, 0xff, 0xfe, 0x08, 0xf0, 0xff, 0xfc, 0x09, 0xfc, 0x1f, 0xc0, 0xfe, 0x10, 0xe7, 0xff, 
    0xf3, 0xff, 0xff, 0xfd, 0xfa, 0x77, 0xff, 0x7c, 0x18, 0xe3, 0xfe, 0x1e, 0x3f, 0xff, 0xf3, 0xff, 
    0xe3, 0xff, 0xff, 0xfb, 0xf7, 0x37, 0xba, 0x00, 0x3e, 0xc3, 0xf0, 0xff, 0xcf, 0xff, 0xf9, 0xff, 
    0xe3, 0xff, 0xff, 0xf7, 0xff, 0xb7, 0x82, 0x00, 0x08, 0x02, 0x21, 0xff, 0xf7, 0xff, 0xfc, 0xff, 
    0xe3, 0xff, 0xff, 0xe0, 0x8c, 0x18, 0xc1, 0x00, 0x08, 0x02, 0x30, 0x7f, 0x87, 0x11, 0xe0, 0xff, 
    0xc7, 0xff, 0xff, 0xc0, 0x8e, 0x08, 0xc0, 0x00, 0x08, 0x22, 0x30, 0x80, 0x42, 0x10, 0xc1, 0xff, 
    0x87, 0xff, 0xff, 0x80, 0x88, 0x18, 0x81, 0x80, 0x08, 0x12, 0x21, 0x7e, 0xa2, 0x10, 0x83, 0xff, 
    0x0f, 0xff, 0xff, 0x00, 0x80, 0x38, 0x83, 0x20, 0x08, 0x0a, 0x21, 0x00, 0x01, 0x10, 0x07, 0xff, 
    0x1f, 0xff, 0xfe, 0x00, 0x80, 0x78, 0x07, 0x00, 0x08, 0x06, 0x21, 0x7e, 0xe1, 0x10, 0x0f, 0xff, 
    0x77, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x00, 0x08, 0x82, 0x3e, 0x00, 0x1f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0x8e, 0x01, 0x08, 0xc0, 0x3f, 0x7e, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x30, 0x80, 0x48, 0x00, 0x03, 0x08, 0xe0, 0x30, 0x00, 0x03, 0x10, 0x7f, 0xff, 
    0xff, 0xff, 0xe0, 0x70, 0x80, 0x28, 0x03, 0x07, 0x08, 0xf0, 0x30, 0x7e, 0x83, 0x10, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x70, 0x8c, 0x18, 0xc1, 0x83, 0x08, 0xf8, 0x38, 0x0c, 0x07, 0x11, 0xff, 0xff, 
    0xff, 0xff, 0xf8, 0x30, 0x9e, 0x19, 0xe1, 0x81, 0x08, 0xfc, 0x3c, 0x00, 0x0f, 0x31, 0xff, 0xff, 
    0xff, 0xff, 0xec, 0x10, 0xbf, 0x3b, 0xf3, 0xc0, 0x08, 0xbe, 0x3f, 0x00, 0x3f, 0x73, 0xff, 0xff, 
    0xff, 0xff, 0xee, 0x00, 0xff, 0xff, 0xfb, 0xe0, 0x08, 0xff, 0x6f, 0xe1, 0xff, 0xf7, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xbf, 0xf0, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfb, 0xbf, 0xff, 0xff, 0xff, 0x79, 0xff, 0xfb, 0xfb, 0xff, 0xff, 0xdf, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x9f, 0xdf, 0xff, 0xef, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x38, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x30, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x02, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xe0, 0x02, 0x0d, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x70, 0xf7, 0xbf, 0xff, 0xff, 
    0xff, 0xff, 0xfd, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x0e, 0xc1, 0xda, 0x8f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x44, 0x3f, 0xff, 0xff, 0xfb, 0x6f, 0xfd, 0xfd, 0xcf, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf8, 0xc2, 0x3f, 0xff, 0xff, 0xf3, 0xef, 0xff, 0xfe, 0xed, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf8, 0xc3, 0xff, 0xff, 0xff, 0xef, 0x0f, 0xff, 0xff, 0xe9, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff
};

void setup() {
  pinMode(speakerPin, OUTPUT);
  // Инициализация дисплея
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("SSD1306 allocation failed");
    while(1);
  }
  randomSeed(analogRead(A0));
  pinMode(buttonLeftPin, INPUT_PULLUP);
  pinMode(buttonRightPin, INPUT_PULLUP);
  resetGame();
  display.drawBitmap(0, 0, arc_img, 128, 64, 1);
  display.display();
  delay(3000);
}

void loop() {
  // Обновление позиции мяча
  ballX += ballSpeedX;
  ballY += ballSpeedY;

  // Проверка столкновений с краями
  if (ballX - ballRadius < 0 || ballX + ballRadius > SCREEN_WIDTH) {
    ballSpeedX = -ballSpeedX;
    tone(speakerPin, 2000, 200);
  }
  if (ballY - ballRadius < 0) {
    ballSpeedY = -ballSpeedY;
    tone(speakerPin, 2000, 200);
  }
  if (ballY + ballRadius > SCREEN_HEIGHT) {
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(SCREEN_WIDTH / 2 - 30, SCREEN_HEIGHT / 2);
    display.println("FAIL");
    display.display();
    tone(speakerPin, 1000, 400);
    delay(1000);
    resetGame();
    paddleX = SCREEN_WIDTH / 2 - 20;
  }

  // Проверка нажатия кнопок и перемещение платформы
  if (digitalRead(buttonLeftPin) == LOW) {
    paddleX = max(0, paddleX - 5);
  }
  if (digitalRead(buttonRightPin) == LOW) {
    paddleX = min(SCREEN_WIDTH - paddleWidth, paddleX + 5);
  }

  // Проверка столкновения с платформой
  if (ballY + ballRadius >= paddleY && ballY + ballRadius <= paddleY + paddleHeight && ballX >= paddleX && ballX <= paddleX + paddleWidth) {
    ballSpeedY = -ballSpeedY;
  }

  // Проверка уничтожения блоков
  bool allBricksDestroyed = true;
  for (int i = 0; i < brickRows; i++) {
    for (int j = 0; j < brickCols; j++) {
      if (bricks[i][j] && ballX >= j * brickWidth && ballX <= (j + 1) * brickWidth && ballY >= i * brickHeight && ballY <= (i + 1) * brickHeight) {
        bricks[i][j] = false;
        ballSpeedY = -ballSpeedY;
        tone(speakerPin, 2000, 200);
      }
      if (bricks[i][j]) {
        allBricksDestroyed = false;
      }
    }
  }

  if (allBricksDestroyed) {
    gameWon = true;
  }

  // Отрисовка игрового поля
  drawGame();

  // Задержка для плавности анимации
  delay(10);
}

void drawGame() {
  // Очистка экрана
  display.clearDisplay();

  // Отрисовка мяча
  display.fillCircle(ballX, ballY, ballRadius, SSD1306_WHITE);

  // Отрисовка платформы
  display.fillRect(paddleX, paddleY, paddleWidth, paddleHeight, SSD1306_WHITE);

  // Отрисовка блоков
  for (int i = 0; i < brickRows; i++) {
    for (int j = 0; j < brickCols; j++) {
      if (bricks[i][j]) {
        display.fillRect(j * brickWidth, i * brickHeight, brickWidth, brickHeight, SSD1306_WHITE);
      }
    }
  }

  // Отображение "WIN" при победе
  if (gameWon) {
    display.setTextSize(3);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);
    display.println("WIN");
  }

  // Обновление экрана
  display.display();
}

void resetGame() {
  // Сброс позиции мяча
  ballX = SCREEN_WIDTH / 2;
  ballY = SCREEN_HEIGHT - paddleHeight - ballRadius;
  int randomDirection = random(0, 2) ? -1 : 1;
  ballSpeedX = (random(1, 3) * randomDirection);
  ballSpeedY = (random(1, 3) );

  // Сброс состояния блоков
  for (int i = 0; i < brickRows; i++) {
    for (int j = 0; j < brickCols; j++) {
      bricks[i][j] = true;
    }
  }

  // Сброс состояния игры
  gameWon = false;

  // Отрисовка обновленного экрана
  drawGame();
}